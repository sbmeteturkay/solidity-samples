{
	"id": "7e5b0f5f39e673227dc038a9ef3bb98f",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.4.26",
	"solcLongVersion": "0.4.26+commit.4563c3fc",
	"input": {
		"language": "Solidity",
		"sources": {
			"erc20/contracts/BasicToken.sol": {
				"content": "pragma solidity ^0.4.18;\r\n\r\n\r\nimport \"./ERC20Basic.sol\";\r\nimport \"./SafeMath.sol\";\r\n\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  uint256 totalSupply_;\r\n\r\n  /**\r\n  * @dev total number of tokens in existence\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return totalSupply_;\r\n  }\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n"
			},
			"erc20/contracts/SafeMath.sol": {
				"content": "pragma solidity ^0.4.18;\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n"
			},
			"erc20/contracts/ERC20Basic.sol": {
				"content": "pragma solidity ^0.4.18;\r\n\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": false,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			}
		}
	},
	"output": {
		"contracts": {
			"erc20/contracts/BasicToken.sol": {
				"BasicToken": {
					"abi": [
						{
							"constant": true,
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"name": "",
									"type": "uint256"
								}
							],
							"payable": false,
							"stateMutability": "view",
							"type": "function"
						},
						{
							"constant": true,
							"inputs": [
								{
									"name": "_owner",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"name": "balance",
									"type": "uint256"
								}
							],
							"payable": false,
							"stateMutability": "view",
							"type": "function"
						},
						{
							"constant": false,
							"inputs": [
								{
									"name": "_to",
									"type": "address"
								},
								{
									"name": "_value",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"name": "",
									"type": "bool"
								}
							],
							"payable": false,
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						}
					],
					"devdoc": {
						"methods": {
							"balanceOf(address)": {
								"details": "Gets the balance of the specified address.\r",
								"params": {
									"_owner": "The address to query the the balance of.\r"
								},
								"return": "An uint256 representing the amount owned by the passed address.\r"
							},
							"totalSupply()": {
								"details": "total number of tokens in existence\r"
							},
							"transfer(address,uint256)": {
								"details": "transfer token for a specified address\r",
								"params": {
									"_to": "The address to transfer to.\r",
									"_value": "The amount to be transferred.\r"
								}
							}
						},
						"title": "Basic token\r"
					},
					"evm": {
						"assembly": "    /* \"erc20/contracts/BasicToken.sol\":182:1340  contract BasicToken is ERC20Basic {\r... */\n  mstore(0x40, 0x80)\n  callvalue\n    /* \"--CODEGEN--\":8:17   */\n  dup1\n    /* \"--CODEGEN--\":5:7   */\n  iszero\n  tag_1\n  jumpi\n    /* \"--CODEGEN--\":30:31   */\n  0x0\n    /* \"--CODEGEN--\":27:28   */\n  dup1\n    /* \"--CODEGEN--\":20:32   */\n  revert\n    /* \"--CODEGEN--\":5:7   */\ntag_1:\n    /* \"erc20/contracts/BasicToken.sol\":182:1340  contract BasicToken is ERC20Basic {\r... */\n  pop\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x0\n  codecopy\n  0x0\n  return\nstop\n\nsub_0: assembly {\n        /* \"erc20/contracts/BasicToken.sol\":182:1340  contract BasicToken is ERC20Basic {\r... */\n      mstore(0x40, 0x80)\n      jumpi(tag_1, lt(calldatasize, 0x4))\n      calldataload(0x0)\n      0x100000000000000000000000000000000000000000000000000000000\n      swap1\n      div\n      0xffffffff\n      and\n      dup1\n      0x18160ddd\n      eq\n      tag_2\n      jumpi\n      dup1\n      0x70a08231\n      eq\n      tag_3\n      jumpi\n      dup1\n      0xa9059cbb\n      eq\n      tag_4\n      jumpi\n    tag_1:\n      0x0\n      dup1\n      revert\n        /* \"erc20/contracts/BasicToken.sol\":383:468  function totalSupply() public view returns (uint256) {\r... */\n    tag_2:\n      callvalue\n        /* \"--CODEGEN--\":8:17   */\n      dup1\n        /* \"--CODEGEN--\":5:7   */\n      iszero\n      tag_5\n      jumpi\n        /* \"--CODEGEN--\":30:31   */\n      0x0\n        /* \"--CODEGEN--\":27:28   */\n      dup1\n        /* \"--CODEGEN--\":20:32   */\n      revert\n        /* \"--CODEGEN--\":5:7   */\n    tag_5:\n        /* \"erc20/contracts/BasicToken.sol\":383:468  function totalSupply() public view returns (uint256) {\r... */\n      pop\n      tag_6\n      jump(tag_7)\n    tag_6:\n      mload(0x40)\n      dup1\n      dup3\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"erc20/contracts/BasicToken.sol\":1226:1335  function balanceOf(address _owner) public view returns (uint256 balance) {\r... */\n    tag_3:\n      callvalue\n        /* \"--CODEGEN--\":8:17   */\n      dup1\n        /* \"--CODEGEN--\":5:7   */\n      iszero\n      tag_8\n      jumpi\n        /* \"--CODEGEN--\":30:31   */\n      0x0\n        /* \"--CODEGEN--\":27:28   */\n      dup1\n        /* \"--CODEGEN--\":20:32   */\n      revert\n        /* \"--CODEGEN--\":5:7   */\n    tag_8:\n        /* \"erc20/contracts/BasicToken.sol\":1226:1335  function balanceOf(address _owner) public view returns (uint256 balance) {\r... */\n      pop\n      tag_9\n      0x4\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      dup1\n      dup1\n      calldataload\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      pop\n      pop\n      pop\n      jump(tag_10)\n    tag_9:\n      mload(0x40)\n      dup1\n      dup3\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"erc20/contracts/BasicToken.sol\":629:1017  function transfer(address _to, uint256 _value) public returns (bool) {\r... */\n    tag_4:\n      callvalue\n        /* \"--CODEGEN--\":8:17   */\n      dup1\n        /* \"--CODEGEN--\":5:7   */\n      iszero\n      tag_11\n      jumpi\n        /* \"--CODEGEN--\":30:31   */\n      0x0\n        /* \"--CODEGEN--\":27:28   */\n      dup1\n        /* \"--CODEGEN--\":20:32   */\n      revert\n        /* \"--CODEGEN--\":5:7   */\n    tag_11:\n        /* \"erc20/contracts/BasicToken.sol\":629:1017  function transfer(address _to, uint256 _value) public returns (bool) {\r... */\n      pop\n      tag_12\n      0x4\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      dup1\n      dup1\n      calldataload\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      dup1\n      calldataload\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      pop\n      pop\n      pop\n      jump(tag_13)\n    tag_12:\n      mload(0x40)\n      dup1\n      dup3\n      iszero\n      iszero\n      iszero\n      iszero\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"erc20/contracts/BasicToken.sol\":383:468  function totalSupply() public view returns (uint256) {\r... */\n    tag_7:\n        /* \"erc20/contracts/BasicToken.sol\":427:434  uint256 */\n      0x0\n        /* \"erc20/contracts/BasicToken.sol\":450:462  totalSupply_ */\n      sload(0x1)\n        /* \"erc20/contracts/BasicToken.sol\":443:462  return totalSupply_ */\n      swap1\n      pop\n        /* \"erc20/contracts/BasicToken.sol\":383:468  function totalSupply() public view returns (uint256) {\r... */\n      swap1\n      jump\t// out\n        /* \"erc20/contracts/BasicToken.sol\":1226:1335  function balanceOf(address _owner) public view returns (uint256 balance) {\r... */\n    tag_10:\n        /* \"erc20/contracts/BasicToken.sol\":1282:1297  uint256 balance */\n      0x0\n        /* \"erc20/contracts/BasicToken.sol\":1313:1321  balances */\n      dup1\n        /* \"erc20/contracts/BasicToken.sol\":1313:1329  balances[_owner] */\n      0x0\n        /* \"erc20/contracts/BasicToken.sol\":1322:1328  _owner */\n      dup4\n        /* \"erc20/contracts/BasicToken.sol\":1313:1329  balances[_owner] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x0\n      keccak256\n      sload\n        /* \"erc20/contracts/BasicToken.sol\":1306:1329  return balances[_owner] */\n      swap1\n      pop\n        /* \"erc20/contracts/BasicToken.sol\":1226:1335  function balanceOf(address _owner) public view returns (uint256 balance) {\r... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"erc20/contracts/BasicToken.sol\":629:1017  function transfer(address _to, uint256 _value) public returns (bool) {\r... */\n    tag_13:\n        /* \"erc20/contracts/BasicToken.sol\":692:696  bool */\n      0x0\n        /* \"erc20/contracts/BasicToken.sol\":728:729  0 */\n      dup1\n        /* \"erc20/contracts/BasicToken.sol\":713:730  _to != address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"erc20/contracts/BasicToken.sol\":713:716  _to */\n      dup4\n        /* \"erc20/contracts/BasicToken.sol\":713:730  _to != address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n      iszero\n        /* \"erc20/contracts/BasicToken.sol\":705:731  require(_to != address(0)) */\n      iszero\n      iszero\n      tag_17\n      jumpi\n      0x0\n      dup1\n      revert\n    tag_17:\n        /* \"erc20/contracts/BasicToken.sol\":756:764  balances */\n      0x0\n        /* \"erc20/contracts/BasicToken.sol\":756:776  balances[msg.sender] */\n      dup1\n        /* \"erc20/contracts/BasicToken.sol\":765:775  msg.sender */\n      caller\n        /* \"erc20/contracts/BasicToken.sol\":756:776  balances[msg.sender] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x0\n      keccak256\n      sload\n        /* \"erc20/contracts/BasicToken.sol\":746:752  _value */\n      dup3\n        /* \"erc20/contracts/BasicToken.sol\":746:776  _value <= balances[msg.sender] */\n      gt\n      iszero\n        /* \"erc20/contracts/BasicToken.sol\":738:777  require(_value <= balances[msg.sender]) */\n      iszero\n      iszero\n      tag_18\n      jumpi\n      0x0\n      dup1\n      revert\n    tag_18:\n        /* \"erc20/contracts/BasicToken.sol\":873:905  balances[msg.sender].sub(_value) */\n      tag_19\n        /* \"erc20/contracts/BasicToken.sol\":898:904  _value */\n      dup3\n        /* \"erc20/contracts/BasicToken.sol\":873:881  balances */\n      0x0\n        /* \"erc20/contracts/BasicToken.sol\":873:893  balances[msg.sender] */\n      dup1\n        /* \"erc20/contracts/BasicToken.sol\":882:892  msg.sender */\n      caller\n        /* \"erc20/contracts/BasicToken.sol\":873:893  balances[msg.sender] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x0\n      keccak256\n      sload\n        /* \"erc20/contracts/BasicToken.sol\":873:897  balances[msg.sender].sub */\n      tag_20\n      swap1\n        /* \"erc20/contracts/BasicToken.sol\":873:905  balances[msg.sender].sub(_value) */\n      swap2\n      swap1\n      0xffffffff\n      and\n      jump\t// in\n    tag_19:\n        /* \"erc20/contracts/BasicToken.sol\":850:858  balances */\n      0x0\n        /* \"erc20/contracts/BasicToken.sol\":850:870  balances[msg.sender] */\n      dup1\n        /* \"erc20/contracts/BasicToken.sol\":859:869  msg.sender */\n      caller\n        /* \"erc20/contracts/BasicToken.sol\":850:870  balances[msg.sender] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x0\n      keccak256\n        /* \"erc20/contracts/BasicToken.sol\":850:905  balances[msg.sender] = balances[msg.sender].sub(_value) */\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"erc20/contracts/BasicToken.sol\":928:953  balances[_to].add(_value) */\n      tag_21\n        /* \"erc20/contracts/BasicToken.sol\":946:952  _value */\n      dup3\n        /* \"erc20/contracts/BasicToken.sol\":928:936  balances */\n      0x0\n        /* \"erc20/contracts/BasicToken.sol\":928:941  balances[_to] */\n      dup1\n        /* \"erc20/contracts/BasicToken.sol\":937:940  _to */\n      dup7\n        /* \"erc20/contracts/BasicToken.sol\":928:941  balances[_to] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x0\n      keccak256\n      sload\n        /* \"erc20/contracts/BasicToken.sol\":928:945  balances[_to].add */\n      tag_22\n      swap1\n        /* \"erc20/contracts/BasicToken.sol\":928:953  balances[_to].add(_value) */\n      swap2\n      swap1\n      0xffffffff\n      and\n      jump\t// in\n    tag_21:\n        /* \"erc20/contracts/BasicToken.sol\":912:920  balances */\n      0x0\n        /* \"erc20/contracts/BasicToken.sol\":912:925  balances[_to] */\n      dup1\n        /* \"erc20/contracts/BasicToken.sol\":921:924  _to */\n      dup6\n        /* \"erc20/contracts/BasicToken.sol\":912:925  balances[_to] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x0\n      keccak256\n        /* \"erc20/contracts/BasicToken.sol\":912:953  balances[_to] = balances[_to].add(_value) */\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"erc20/contracts/BasicToken.sol\":981:984  _to */\n      dup3\n        /* \"erc20/contracts/BasicToken.sol\":960:993  Transfer(msg.sender, _to, _value) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"erc20/contracts/BasicToken.sol\":969:979  msg.sender */\n      caller\n        /* \"erc20/contracts/BasicToken.sol\":960:993  Transfer(msg.sender, _to, _value) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\n        /* \"erc20/contracts/BasicToken.sol\":986:992  _value */\n      dup5\n        /* \"erc20/contracts/BasicToken.sol\":960:993  Transfer(msg.sender, _to, _value) */\n      mload(0x40)\n      dup1\n      dup3\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log3\n        /* \"erc20/contracts/BasicToken.sol\":1007:1011  true */\n      0x1\n        /* \"erc20/contracts/BasicToken.sol\":1000:1011  return true */\n      swap1\n      pop\n        /* \"erc20/contracts/BasicToken.sol\":629:1017  function transfer(address _to, uint256 _value) public returns (bool) {\r... */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"erc20/contracts/SafeMath.sol\":870:983  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r... */\n    tag_20:\n        /* \"erc20/contracts/SafeMath.sol\":928:935  uint256 */\n      0x0\n        /* \"erc20/contracts/SafeMath.sol\":956:957  a */\n      dup3\n        /* \"erc20/contracts/SafeMath.sol\":951:952  b */\n      dup3\n        /* \"erc20/contracts/SafeMath.sol\":951:957  b <= a */\n      gt\n      iszero\n        /* \"erc20/contracts/SafeMath.sol\":944:958  assert(b <= a) */\n      iszero\n      iszero\n      tag_24\n      jumpi\n      invalid\n    tag_24:\n        /* \"erc20/contracts/SafeMath.sol\":976:977  b */\n      dup2\n        /* \"erc20/contracts/SafeMath.sol\":972:973  a */\n      dup4\n        /* \"erc20/contracts/SafeMath.sol\":972:977  a - b */\n      sub\n        /* \"erc20/contracts/SafeMath.sol\":965:977  return a - b */\n      swap1\n      pop\n        /* \"erc20/contracts/SafeMath.sol\":870:983  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r... */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"erc20/contracts/SafeMath.sol\":1050:1183  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r... */\n    tag_22:\n        /* \"erc20/contracts/SafeMath.sol\":1108:1115  uint256 */\n      0x0\n        /* \"erc20/contracts/SafeMath.sol\":1124:1133  uint256 c */\n      dup1\n        /* \"erc20/contracts/SafeMath.sol\":1140:1141  b */\n      dup3\n        /* \"erc20/contracts/SafeMath.sol\":1136:1137  a */\n      dup5\n        /* \"erc20/contracts/SafeMath.sol\":1136:1141  a + b */\n      add\n        /* \"erc20/contracts/SafeMath.sol\":1124:1141  uint256 c = a + b */\n      swap1\n      pop\n        /* \"erc20/contracts/SafeMath.sol\":1160:1161  a */\n      dup4\n        /* \"erc20/contracts/SafeMath.sol\":1155:1156  c */\n      dup2\n        /* \"erc20/contracts/SafeMath.sol\":1155:1161  c >= a */\n      lt\n      iszero\n        /* \"erc20/contracts/SafeMath.sol\":1148:1162  assert(c >= a) */\n      iszero\n      iszero\n      tag_26\n      jumpi\n      invalid\n    tag_26:\n        /* \"erc20/contracts/SafeMath.sol\":1176:1177  c */\n      dup1\n        /* \"erc20/contracts/SafeMath.sol\":1169:1177  return c */\n      swap2\n      pop\n        /* \"erc20/contracts/SafeMath.sol\":1050:1183  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r... */\n      pop\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n\n    auxdata: 0xa165627a7a72305820b7aea0648da2589c6cbe5ece03f61db4ba5d862212a6e824e613c75c7ad1f6150029\n}\n",
						"bytecode": {
							"linkReferences": {},
							"object": "608060405234801561001057600080fd5b50610417806100206000396000f300608060405260043610610057576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806318160ddd1461005c57806370a0823114610087578063a9059cbb146100de575b600080fd5b34801561006857600080fd5b50610071610143565b6040518082815260200191505060405180910390f35b34801561009357600080fd5b506100c8600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061014d565b6040518082815260200191505060405180910390f35b3480156100ea57600080fd5b50610129600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610195565b604051808215151515815260200191505060405180910390f35b6000600154905090565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141515156101d257600080fd5b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054821115151561021f57600080fd5b610270826000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546103b490919063ffffffff16565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610303826000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546103cd90919063ffffffff16565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b60008282111515156103c257fe5b818303905092915050565b60008082840190508381101515156103e157fe5b80915050929150505600a165627a7a72305820b7aea0648da2589c6cbe5ece03f61db4ba5d862212a6e824e613c75c7ad1f6150029",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x417 DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN STOP PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x57 JUMPI PUSH1 0x0 CALLDATALOAD PUSH29 0x100000000000000000000000000000000000000000000000000000000 SWAP1 DIV PUSH4 0xFFFFFFFF AND DUP1 PUSH4 0x18160DDD EQ PUSH2 0x5C JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x87 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0xDE JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x68 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x71 PUSH2 0x143 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x93 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xC8 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x14D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xEA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x129 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x195 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 PUSH1 0x1 SLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO ISZERO ISZERO PUSH2 0x1D2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD DUP3 GT ISZERO ISZERO ISZERO PUSH2 0x21F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x270 DUP3 PUSH1 0x0 DUP1 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0x3B4 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x0 DUP1 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP PUSH2 0x303 DUP3 PUSH1 0x0 DUP1 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0x3CD SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x0 DUP1 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP5 PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH1 0x1 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 GT ISZERO ISZERO ISZERO PUSH2 0x3C2 JUMPI INVALID JUMPDEST DUP2 DUP4 SUB SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 DUP5 ADD SWAP1 POP DUP4 DUP2 LT ISZERO ISZERO ISZERO PUSH2 0x3E1 JUMPI INVALID JUMPDEST DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP STOP LOG1 PUSH6 0x627A7A723058 KECCAK256 0xb7 0xae LOG0 PUSH5 0x8DA2589C6C 0xbe 0x5e 0xce SUB 0xf6 SAR 0xb4 0xba 0x5d DUP7 0x22 SLT 0xa6 0xe8 0x24 0xe6 SGT 0xc7 0x5c PUSH27 0xD1F615002900000000000000000000000000000000000000000000 ",
							"sourceMap": "182:1158:0:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;182:1158:0;;;;;;;"
						},
						"deployedBytecode": {
							"linkReferences": {},
							"object": "608060405260043610610057576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806318160ddd1461005c57806370a0823114610087578063a9059cbb146100de575b600080fd5b34801561006857600080fd5b50610071610143565b6040518082815260200191505060405180910390f35b34801561009357600080fd5b506100c8600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061014d565b6040518082815260200191505060405180910390f35b3480156100ea57600080fd5b50610129600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610195565b604051808215151515815260200191505060405180910390f35b6000600154905090565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141515156101d257600080fd5b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054821115151561021f57600080fd5b610270826000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546103b490919063ffffffff16565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610303826000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546103cd90919063ffffffff16565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b60008282111515156103c257fe5b818303905092915050565b60008082840190508381101515156103e157fe5b80915050929150505600a165627a7a72305820b7aea0648da2589c6cbe5ece03f61db4ba5d862212a6e824e613c75c7ad1f6150029",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x57 JUMPI PUSH1 0x0 CALLDATALOAD PUSH29 0x100000000000000000000000000000000000000000000000000000000 SWAP1 DIV PUSH4 0xFFFFFFFF AND DUP1 PUSH4 0x18160DDD EQ PUSH2 0x5C JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x87 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0xDE JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x68 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x71 PUSH2 0x143 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x93 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xC8 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x14D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xEA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x129 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x195 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 PUSH1 0x1 SLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO ISZERO ISZERO PUSH2 0x1D2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD DUP3 GT ISZERO ISZERO ISZERO PUSH2 0x21F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x270 DUP3 PUSH1 0x0 DUP1 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0x3B4 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x0 DUP1 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP PUSH2 0x303 DUP3 PUSH1 0x0 DUP1 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0x3CD SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x0 DUP1 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP5 PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH1 0x1 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 GT ISZERO ISZERO ISZERO PUSH2 0x3C2 JUMPI INVALID JUMPDEST DUP2 DUP4 SUB SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 DUP5 ADD SWAP1 POP DUP4 DUP2 LT ISZERO ISZERO ISZERO PUSH2 0x3E1 JUMPI INVALID JUMPDEST DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP STOP LOG1 PUSH6 0x627A7A723058 KECCAK256 0xb7 0xae LOG0 PUSH5 0x8DA2589C6C 0xbe 0x5e 0xce SUB 0xf6 SAR 0xb4 0xba 0x5d DUP7 0x22 SLT 0xa6 0xe8 0x24 0xe6 SGT 0xc7 0x5c PUSH27 0xD1F615002900000000000000000000000000000000000000000000 ",
							"sourceMap": "182:1158:0:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;383:85;;8:9:-1;5:2;;;30:1;27;20:12;5:2;383:85:0;;;;;;;;;;;;;;;;;;;;;;;1226:109;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1226:109:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;629:388;;8:9:-1;5:2;;;30:1;27;20:12;5:2;629:388:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;383:85;427:7;450:12;;443:19;;383:85;:::o;1226:109::-;1282:15;1313:8;:16;1322:6;1313:16;;;;;;;;;;;;;;;;1306:23;;1226:109;;;:::o;629:388::-;692:4;728:1;713:17;;:3;:17;;;;705:26;;;;;;;;756:8;:20;765:10;756:20;;;;;;;;;;;;;;;;746:6;:30;;738:39;;;;;;;;873:32;898:6;873:8;:20;882:10;873:20;;;;;;;;;;;;;;;;:24;;:32;;;;:::i;:::-;850:8;:20;859:10;850:20;;;;;;;;;;;;;;;:55;;;;928:25;946:6;928:8;:13;937:3;928:13;;;;;;;;;;;;;;;;:17;;:25;;;;:::i;:::-;912:8;:13;921:3;912:13;;;;;;;;;;;;;;;:41;;;;981:3;960:33;;969:10;960:33;;;986:6;960:33;;;;;;;;;;;;;;;;;;1007:4;1000:11;;629:388;;;;:::o;870:113:2:-;928:7;956:1;951;:6;;944:14;;;;;;976:1;972;:5;965:12;;870:113;;;;:::o;1050:133::-;1108:7;1124:9;1140:1;1136;:5;1124:17;;1160:1;1155;:6;;1148:14;;;;;;1176:1;1169:8;;1050:133;;;;;:::o"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "209400",
								"executionCost": "251",
								"totalCost": "209651"
							},
							"external": {
								"balanceOf(address)": "581",
								"totalSupply()": "402",
								"transfer(address,uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 182,
									"end": 1340,
									"name": "PUSH",
									"value": "80"
								},
								{
									"begin": 182,
									"end": 1340,
									"name": "PUSH",
									"value": "40"
								},
								{
									"begin": 182,
									"end": 1340,
									"name": "MSTORE"
								},
								{
									"begin": 182,
									"end": 1340,
									"name": "CALLVALUE"
								},
								{
									"begin": 8,
									"end": 17,
									"name": "DUP1"
								},
								{
									"begin": 5,
									"end": 7,
									"name": "ISZERO"
								},
								{
									"begin": 5,
									"end": 7,
									"name": "PUSH [tag]",
									"value": "1"
								},
								{
									"begin": 5,
									"end": 7,
									"name": "JUMPI"
								},
								{
									"begin": 30,
									"end": 31,
									"name": "PUSH",
									"value": "0"
								},
								{
									"begin": 27,
									"end": 28,
									"name": "DUP1"
								},
								{
									"begin": 20,
									"end": 32,
									"name": "REVERT"
								},
								{
									"begin": 5,
									"end": 7,
									"name": "tag",
									"value": "1"
								},
								{
									"begin": 5,
									"end": 7,
									"name": "JUMPDEST"
								},
								{
									"begin": 182,
									"end": 1340,
									"name": "POP"
								},
								{
									"begin": 182,
									"end": 1340,
									"name": "PUSH #[$]",
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 182,
									"end": 1340,
									"name": "DUP1"
								},
								{
									"begin": 182,
									"end": 1340,
									"name": "PUSH [$]",
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 182,
									"end": 1340,
									"name": "PUSH",
									"value": "0"
								},
								{
									"begin": 182,
									"end": 1340,
									"name": "CODECOPY"
								},
								{
									"begin": 182,
									"end": 1340,
									"name": "PUSH",
									"value": "0"
								},
								{
									"begin": 182,
									"end": 1340,
									"name": "RETURN"
								}
							],
							".data": {
								"0": {
									".auxdata": "a165627a7a72305820b7aea0648da2589c6cbe5ece03f61db4ba5d862212a6e824e613c75c7ad1f6150029",
									".code": [
										{
											"begin": 182,
											"end": 1340,
											"name": "PUSH",
											"value": "80"
										},
										{
											"begin": 182,
											"end": 1340,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 182,
											"end": 1340,
											"name": "MSTORE"
										},
										{
											"begin": 182,
											"end": 1340,
											"name": "PUSH",
											"value": "4"
										},
										{
											"begin": 182,
											"end": 1340,
											"name": "CALLDATASIZE"
										},
										{
											"begin": 182,
											"end": 1340,
											"name": "LT"
										},
										{
											"begin": 182,
											"end": 1340,
											"name": "PUSH [tag]",
											"value": "1"
										},
										{
											"begin": 182,
											"end": 1340,
											"name": "JUMPI"
										},
										{
											"begin": 182,
											"end": 1340,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 182,
											"end": 1340,
											"name": "CALLDATALOAD"
										},
										{
											"begin": 182,
											"end": 1340,
											"name": "PUSH",
											"value": "100000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 182,
											"end": 1340,
											"name": "SWAP1"
										},
										{
											"begin": 182,
											"end": 1340,
											"name": "DIV"
										},
										{
											"begin": 182,
											"end": 1340,
											"name": "PUSH",
											"value": "FFFFFFFF"
										},
										{
											"begin": 182,
											"end": 1340,
											"name": "AND"
										},
										{
											"begin": 182,
											"end": 1340,
											"name": "DUP1"
										},
										{
											"begin": 182,
											"end": 1340,
											"name": "PUSH",
											"value": "18160DDD"
										},
										{
											"begin": 182,
											"end": 1340,
											"name": "EQ"
										},
										{
											"begin": 182,
											"end": 1340,
											"name": "PUSH [tag]",
											"value": "2"
										},
										{
											"begin": 182,
											"end": 1340,
											"name": "JUMPI"
										},
										{
											"begin": 182,
											"end": 1340,
											"name": "DUP1"
										},
										{
											"begin": 182,
											"end": 1340,
											"name": "PUSH",
											"value": "70A08231"
										},
										{
											"begin": 182,
											"end": 1340,
											"name": "EQ"
										},
										{
											"begin": 182,
											"end": 1340,
											"name": "PUSH [tag]",
											"value": "3"
										},
										{
											"begin": 182,
											"end": 1340,
											"name": "JUMPI"
										},
										{
											"begin": 182,
											"end": 1340,
											"name": "DUP1"
										},
										{
											"begin": 182,
											"end": 1340,
											"name": "PUSH",
											"value": "A9059CBB"
										},
										{
											"begin": 182,
											"end": 1340,
											"name": "EQ"
										},
										{
											"begin": 182,
											"end": 1340,
											"name": "PUSH [tag]",
											"value": "4"
										},
										{
											"begin": 182,
											"end": 1340,
											"name": "JUMPI"
										},
										{
											"begin": 182,
											"end": 1340,
											"name": "tag",
											"value": "1"
										},
										{
											"begin": 182,
											"end": 1340,
											"name": "JUMPDEST"
										},
										{
											"begin": 182,
											"end": 1340,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 182,
											"end": 1340,
											"name": "DUP1"
										},
										{
											"begin": 182,
											"end": 1340,
											"name": "REVERT"
										},
										{
											"begin": 383,
											"end": 468,
											"name": "tag",
											"value": "2"
										},
										{
											"begin": 383,
											"end": 468,
											"name": "JUMPDEST"
										},
										{
											"begin": 383,
											"end": 468,
											"name": "CALLVALUE"
										},
										{
											"begin": 8,
											"end": 17,
											"name": "DUP1"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "ISZERO"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "PUSH [tag]",
											"value": "5"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "JUMPI"
										},
										{
											"begin": 30,
											"end": 31,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 27,
											"end": 28,
											"name": "DUP1"
										},
										{
											"begin": 20,
											"end": 32,
											"name": "REVERT"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "tag",
											"value": "5"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "JUMPDEST"
										},
										{
											"begin": 383,
											"end": 468,
											"name": "POP"
										},
										{
											"begin": 383,
											"end": 468,
											"name": "PUSH [tag]",
											"value": "6"
										},
										{
											"begin": 383,
											"end": 468,
											"name": "PUSH [tag]",
											"value": "7"
										},
										{
											"begin": 383,
											"end": 468,
											"name": "JUMP"
										},
										{
											"begin": 383,
											"end": 468,
											"name": "tag",
											"value": "6"
										},
										{
											"begin": 383,
											"end": 468,
											"name": "JUMPDEST"
										},
										{
											"begin": 383,
											"end": 468,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 383,
											"end": 468,
											"name": "MLOAD"
										},
										{
											"begin": 383,
											"end": 468,
											"name": "DUP1"
										},
										{
											"begin": 383,
											"end": 468,
											"name": "DUP3"
										},
										{
											"begin": 383,
											"end": 468,
											"name": "DUP2"
										},
										{
											"begin": 383,
											"end": 468,
											"name": "MSTORE"
										},
										{
											"begin": 383,
											"end": 468,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 383,
											"end": 468,
											"name": "ADD"
										},
										{
											"begin": 383,
											"end": 468,
											"name": "SWAP2"
										},
										{
											"begin": 383,
											"end": 468,
											"name": "POP"
										},
										{
											"begin": 383,
											"end": 468,
											"name": "POP"
										},
										{
											"begin": 383,
											"end": 468,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 383,
											"end": 468,
											"name": "MLOAD"
										},
										{
											"begin": 383,
											"end": 468,
											"name": "DUP1"
										},
										{
											"begin": 383,
											"end": 468,
											"name": "SWAP2"
										},
										{
											"begin": 383,
											"end": 468,
											"name": "SUB"
										},
										{
											"begin": 383,
											"end": 468,
											"name": "SWAP1"
										},
										{
											"begin": 383,
											"end": 468,
											"name": "RETURN"
										},
										{
											"begin": 1226,
											"end": 1335,
											"name": "tag",
											"value": "3"
										},
										{
											"begin": 1226,
											"end": 1335,
											"name": "JUMPDEST"
										},
										{
											"begin": 1226,
											"end": 1335,
											"name": "CALLVALUE"
										},
										{
											"begin": 8,
											"end": 17,
											"name": "DUP1"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "ISZERO"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "PUSH [tag]",
											"value": "8"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "JUMPI"
										},
										{
											"begin": 30,
											"end": 31,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 27,
											"end": 28,
											"name": "DUP1"
										},
										{
											"begin": 20,
											"end": 32,
											"name": "REVERT"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "tag",
											"value": "8"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "JUMPDEST"
										},
										{
											"begin": 1226,
											"end": 1335,
											"name": "POP"
										},
										{
											"begin": 1226,
											"end": 1335,
											"name": "PUSH [tag]",
											"value": "9"
										},
										{
											"begin": 1226,
											"end": 1335,
											"name": "PUSH",
											"value": "4"
										},
										{
											"begin": 1226,
											"end": 1335,
											"name": "DUP1"
										},
										{
											"begin": 1226,
											"end": 1335,
											"name": "CALLDATASIZE"
										},
										{
											"begin": 1226,
											"end": 1335,
											"name": "SUB"
										},
										{
											"begin": 1226,
											"end": 1335,
											"name": "DUP2"
										},
										{
											"begin": 1226,
											"end": 1335,
											"name": "ADD"
										},
										{
											"begin": 1226,
											"end": 1335,
											"name": "SWAP1"
										},
										{
											"begin": 1226,
											"end": 1335,
											"name": "DUP1"
										},
										{
											"begin": 1226,
											"end": 1335,
											"name": "DUP1"
										},
										{
											"begin": 1226,
											"end": 1335,
											"name": "CALLDATALOAD"
										},
										{
											"begin": 1226,
											"end": 1335,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1226,
											"end": 1335,
											"name": "AND"
										},
										{
											"begin": 1226,
											"end": 1335,
											"name": "SWAP1"
										},
										{
											"begin": 1226,
											"end": 1335,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 1226,
											"end": 1335,
											"name": "ADD"
										},
										{
											"begin": 1226,
											"end": 1335,
											"name": "SWAP1"
										},
										{
											"begin": 1226,
											"end": 1335,
											"name": "SWAP3"
										},
										{
											"begin": 1226,
											"end": 1335,
											"name": "SWAP2"
										},
										{
											"begin": 1226,
											"end": 1335,
											"name": "SWAP1"
										},
										{
											"begin": 1226,
											"end": 1335,
											"name": "POP"
										},
										{
											"begin": 1226,
											"end": 1335,
											"name": "POP"
										},
										{
											"begin": 1226,
											"end": 1335,
											"name": "POP"
										},
										{
											"begin": 1226,
											"end": 1335,
											"name": "PUSH [tag]",
											"value": "10"
										},
										{
											"begin": 1226,
											"end": 1335,
											"name": "JUMP"
										},
										{
											"begin": 1226,
											"end": 1335,
											"name": "tag",
											"value": "9"
										},
										{
											"begin": 1226,
											"end": 1335,
											"name": "JUMPDEST"
										},
										{
											"begin": 1226,
											"end": 1335,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 1226,
											"end": 1335,
											"name": "MLOAD"
										},
										{
											"begin": 1226,
											"end": 1335,
											"name": "DUP1"
										},
										{
											"begin": 1226,
											"end": 1335,
											"name": "DUP3"
										},
										{
											"begin": 1226,
											"end": 1335,
											"name": "DUP2"
										},
										{
											"begin": 1226,
											"end": 1335,
											"name": "MSTORE"
										},
										{
											"begin": 1226,
											"end": 1335,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 1226,
											"end": 1335,
											"name": "ADD"
										},
										{
											"begin": 1226,
											"end": 1335,
											"name": "SWAP2"
										},
										{
											"begin": 1226,
											"end": 1335,
											"name": "POP"
										},
										{
											"begin": 1226,
											"end": 1335,
											"name": "POP"
										},
										{
											"begin": 1226,
											"end": 1335,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 1226,
											"end": 1335,
											"name": "MLOAD"
										},
										{
											"begin": 1226,
											"end": 1335,
											"name": "DUP1"
										},
										{
											"begin": 1226,
											"end": 1335,
											"name": "SWAP2"
										},
										{
											"begin": 1226,
											"end": 1335,
											"name": "SUB"
										},
										{
											"begin": 1226,
											"end": 1335,
											"name": "SWAP1"
										},
										{
											"begin": 1226,
											"end": 1335,
											"name": "RETURN"
										},
										{
											"begin": 629,
											"end": 1017,
											"name": "tag",
											"value": "4"
										},
										{
											"begin": 629,
											"end": 1017,
											"name": "JUMPDEST"
										},
										{
											"begin": 629,
											"end": 1017,
											"name": "CALLVALUE"
										},
										{
											"begin": 8,
											"end": 17,
											"name": "DUP1"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "ISZERO"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "PUSH [tag]",
											"value": "11"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "JUMPI"
										},
										{
											"begin": 30,
											"end": 31,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 27,
											"end": 28,
											"name": "DUP1"
										},
										{
											"begin": 20,
											"end": 32,
											"name": "REVERT"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "tag",
											"value": "11"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "JUMPDEST"
										},
										{
											"begin": 629,
											"end": 1017,
											"name": "POP"
										},
										{
											"begin": 629,
											"end": 1017,
											"name": "PUSH [tag]",
											"value": "12"
										},
										{
											"begin": 629,
											"end": 1017,
											"name": "PUSH",
											"value": "4"
										},
										{
											"begin": 629,
											"end": 1017,
											"name": "DUP1"
										},
										{
											"begin": 629,
											"end": 1017,
											"name": "CALLDATASIZE"
										},
										{
											"begin": 629,
											"end": 1017,
											"name": "SUB"
										},
										{
											"begin": 629,
											"end": 1017,
											"name": "DUP2"
										},
										{
											"begin": 629,
											"end": 1017,
											"name": "ADD"
										},
										{
											"begin": 629,
											"end": 1017,
											"name": "SWAP1"
										},
										{
											"begin": 629,
											"end": 1017,
											"name": "DUP1"
										},
										{
											"begin": 629,
											"end": 1017,
											"name": "DUP1"
										},
										{
											"begin": 629,
											"end": 1017,
											"name": "CALLDATALOAD"
										},
										{
											"begin": 629,
											"end": 1017,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 629,
											"end": 1017,
											"name": "AND"
										},
										{
											"begin": 629,
											"end": 1017,
											"name": "SWAP1"
										},
										{
											"begin": 629,
											"end": 1017,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 629,
											"end": 1017,
											"name": "ADD"
										},
										{
											"begin": 629,
											"end": 1017,
											"name": "SWAP1"
										},
										{
											"begin": 629,
											"end": 1017,
											"name": "SWAP3"
										},
										{
											"begin": 629,
											"end": 1017,
											"name": "SWAP2"
										},
										{
											"begin": 629,
											"end": 1017,
											"name": "SWAP1"
										},
										{
											"begin": 629,
											"end": 1017,
											"name": "DUP1"
										},
										{
											"begin": 629,
											"end": 1017,
											"name": "CALLDATALOAD"
										},
										{
											"begin": 629,
											"end": 1017,
											"name": "SWAP1"
										},
										{
											"begin": 629,
											"end": 1017,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 629,
											"end": 1017,
											"name": "ADD"
										},
										{
											"begin": 629,
											"end": 1017,
											"name": "SWAP1"
										},
										{
											"begin": 629,
											"end": 1017,
											"name": "SWAP3"
										},
										{
											"begin": 629,
											"end": 1017,
											"name": "SWAP2"
										},
										{
											"begin": 629,
											"end": 1017,
											"name": "SWAP1"
										},
										{
											"begin": 629,
											"end": 1017,
											"name": "POP"
										},
										{
											"begin": 629,
											"end": 1017,
											"name": "POP"
										},
										{
											"begin": 629,
											"end": 1017,
											"name": "POP"
										},
										{
											"begin": 629,
											"end": 1017,
											"name": "PUSH [tag]",
											"value": "13"
										},
										{
											"begin": 629,
											"end": 1017,
											"name": "JUMP"
										},
										{
											"begin": 629,
											"end": 1017,
											"name": "tag",
											"value": "12"
										},
										{
											"begin": 629,
											"end": 1017,
											"name": "JUMPDEST"
										},
										{
											"begin": 629,
											"end": 1017,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 629,
											"end": 1017,
											"name": "MLOAD"
										},
										{
											"begin": 629,
											"end": 1017,
											"name": "DUP1"
										},
										{
											"begin": 629,
											"end": 1017,
											"name": "DUP3"
										},
										{
											"begin": 629,
											"end": 1017,
											"name": "ISZERO"
										},
										{
											"begin": 629,
											"end": 1017,
											"name": "ISZERO"
										},
										{
											"begin": 629,
											"end": 1017,
											"name": "ISZERO"
										},
										{
											"begin": 629,
											"end": 1017,
											"name": "ISZERO"
										},
										{
											"begin": 629,
											"end": 1017,
											"name": "DUP2"
										},
										{
											"begin": 629,
											"end": 1017,
											"name": "MSTORE"
										},
										{
											"begin": 629,
											"end": 1017,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 629,
											"end": 1017,
											"name": "ADD"
										},
										{
											"begin": 629,
											"end": 1017,
											"name": "SWAP2"
										},
										{
											"begin": 629,
											"end": 1017,
											"name": "POP"
										},
										{
											"begin": 629,
											"end": 1017,
											"name": "POP"
										},
										{
											"begin": 629,
											"end": 1017,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 629,
											"end": 1017,
											"name": "MLOAD"
										},
										{
											"begin": 629,
											"end": 1017,
											"name": "DUP1"
										},
										{
											"begin": 629,
											"end": 1017,
											"name": "SWAP2"
										},
										{
											"begin": 629,
											"end": 1017,
											"name": "SUB"
										},
										{
											"begin": 629,
											"end": 1017,
											"name": "SWAP1"
										},
										{
											"begin": 629,
											"end": 1017,
											"name": "RETURN"
										},
										{
											"begin": 383,
											"end": 468,
											"name": "tag",
											"value": "7"
										},
										{
											"begin": 383,
											"end": 468,
											"name": "JUMPDEST"
										},
										{
											"begin": 427,
											"end": 434,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 450,
											"end": 462,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": 450,
											"end": 462,
											"name": "SLOAD"
										},
										{
											"begin": 443,
											"end": 462,
											"name": "SWAP1"
										},
										{
											"begin": 443,
											"end": 462,
											"name": "POP"
										},
										{
											"begin": 383,
											"end": 468,
											"name": "SWAP1"
										},
										{
											"begin": 383,
											"end": 468,
											"name": "JUMP",
											"value": "[out]"
										},
										{
											"begin": 1226,
											"end": 1335,
											"name": "tag",
											"value": "10"
										},
										{
											"begin": 1226,
											"end": 1335,
											"name": "JUMPDEST"
										},
										{
											"begin": 1282,
											"end": 1297,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 1313,
											"end": 1321,
											"name": "DUP1"
										},
										{
											"begin": 1313,
											"end": 1329,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 1322,
											"end": 1328,
											"name": "DUP4"
										},
										{
											"begin": 1313,
											"end": 1329,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1313,
											"end": 1329,
											"name": "AND"
										},
										{
											"begin": 1313,
											"end": 1329,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1313,
											"end": 1329,
											"name": "AND"
										},
										{
											"begin": 1313,
											"end": 1329,
											"name": "DUP2"
										},
										{
											"begin": 1313,
											"end": 1329,
											"name": "MSTORE"
										},
										{
											"begin": 1313,
											"end": 1329,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 1313,
											"end": 1329,
											"name": "ADD"
										},
										{
											"begin": 1313,
											"end": 1329,
											"name": "SWAP1"
										},
										{
											"begin": 1313,
											"end": 1329,
											"name": "DUP2"
										},
										{
											"begin": 1313,
											"end": 1329,
											"name": "MSTORE"
										},
										{
											"begin": 1313,
											"end": 1329,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 1313,
											"end": 1329,
											"name": "ADD"
										},
										{
											"begin": 1313,
											"end": 1329,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 1313,
											"end": 1329,
											"name": "KECCAK256"
										},
										{
											"begin": 1313,
											"end": 1329,
											"name": "SLOAD"
										},
										{
											"begin": 1306,
											"end": 1329,
											"name": "SWAP1"
										},
										{
											"begin": 1306,
											"end": 1329,
											"name": "POP"
										},
										{
											"begin": 1226,
											"end": 1335,
											"name": "SWAP2"
										},
										{
											"begin": 1226,
											"end": 1335,
											"name": "SWAP1"
										},
										{
											"begin": 1226,
											"end": 1335,
											"name": "POP"
										},
										{
											"begin": 1226,
											"end": 1335,
											"name": "JUMP",
											"value": "[out]"
										},
										{
											"begin": 629,
											"end": 1017,
											"name": "tag",
											"value": "13"
										},
										{
											"begin": 629,
											"end": 1017,
											"name": "JUMPDEST"
										},
										{
											"begin": 692,
											"end": 696,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 728,
											"end": 729,
											"name": "DUP1"
										},
										{
											"begin": 713,
											"end": 730,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 713,
											"end": 730,
											"name": "AND"
										},
										{
											"begin": 713,
											"end": 716,
											"name": "DUP4"
										},
										{
											"begin": 713,
											"end": 730,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 713,
											"end": 730,
											"name": "AND"
										},
										{
											"begin": 713,
											"end": 730,
											"name": "EQ"
										},
										{
											"begin": 713,
											"end": 730,
											"name": "ISZERO"
										},
										{
											"begin": 705,
											"end": 731,
											"name": "ISZERO"
										},
										{
											"begin": 705,
											"end": 731,
											"name": "ISZERO"
										},
										{
											"begin": 705,
											"end": 731,
											"name": "PUSH [tag]",
											"value": "17"
										},
										{
											"begin": 705,
											"end": 731,
											"name": "JUMPI"
										},
										{
											"begin": 705,
											"end": 731,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 705,
											"end": 731,
											"name": "DUP1"
										},
										{
											"begin": 705,
											"end": 731,
											"name": "REVERT"
										},
										{
											"begin": 705,
											"end": 731,
											"name": "tag",
											"value": "17"
										},
										{
											"begin": 705,
											"end": 731,
											"name": "JUMPDEST"
										},
										{
											"begin": 756,
											"end": 764,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 756,
											"end": 776,
											"name": "DUP1"
										},
										{
											"begin": 765,
											"end": 775,
											"name": "CALLER"
										},
										{
											"begin": 756,
											"end": 776,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 756,
											"end": 776,
											"name": "AND"
										},
										{
											"begin": 756,
											"end": 776,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 756,
											"end": 776,
											"name": "AND"
										},
										{
											"begin": 756,
											"end": 776,
											"name": "DUP2"
										},
										{
											"begin": 756,
											"end": 776,
											"name": "MSTORE"
										},
										{
											"begin": 756,
											"end": 776,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 756,
											"end": 776,
											"name": "ADD"
										},
										{
											"begin": 756,
											"end": 776,
											"name": "SWAP1"
										},
										{
											"begin": 756,
											"end": 776,
											"name": "DUP2"
										},
										{
											"begin": 756,
											"end": 776,
											"name": "MSTORE"
										},
										{
											"begin": 756,
											"end": 776,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 756,
											"end": 776,
											"name": "ADD"
										},
										{
											"begin": 756,
											"end": 776,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 756,
											"end": 776,
											"name": "KECCAK256"
										},
										{
											"begin": 756,
											"end": 776,
											"name": "SLOAD"
										},
										{
											"begin": 746,
											"end": 752,
											"name": "DUP3"
										},
										{
											"begin": 746,
											"end": 776,
											"name": "GT"
										},
										{
											"begin": 746,
											"end": 776,
											"name": "ISZERO"
										},
										{
											"begin": 738,
											"end": 777,
											"name": "ISZERO"
										},
										{
											"begin": 738,
											"end": 777,
											"name": "ISZERO"
										},
										{
											"begin": 738,
											"end": 777,
											"name": "PUSH [tag]",
											"value": "18"
										},
										{
											"begin": 738,
											"end": 777,
											"name": "JUMPI"
										},
										{
											"begin": 738,
											"end": 777,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 738,
											"end": 777,
											"name": "DUP1"
										},
										{
											"begin": 738,
											"end": 777,
											"name": "REVERT"
										},
										{
											"begin": 738,
											"end": 777,
											"name": "tag",
											"value": "18"
										},
										{
											"begin": 738,
											"end": 777,
											"name": "JUMPDEST"
										},
										{
											"begin": 873,
											"end": 905,
											"name": "PUSH [tag]",
											"value": "19"
										},
										{
											"begin": 898,
											"end": 904,
											"name": "DUP3"
										},
										{
											"begin": 873,
											"end": 881,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 873,
											"end": 893,
											"name": "DUP1"
										},
										{
											"begin": 882,
											"end": 892,
											"name": "CALLER"
										},
										{
											"begin": 873,
											"end": 893,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 873,
											"end": 893,
											"name": "AND"
										},
										{
											"begin": 873,
											"end": 893,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 873,
											"end": 893,
											"name": "AND"
										},
										{
											"begin": 873,
											"end": 893,
											"name": "DUP2"
										},
										{
											"begin": 873,
											"end": 893,
											"name": "MSTORE"
										},
										{
											"begin": 873,
											"end": 893,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 873,
											"end": 893,
											"name": "ADD"
										},
										{
											"begin": 873,
											"end": 893,
											"name": "SWAP1"
										},
										{
											"begin": 873,
											"end": 893,
											"name": "DUP2"
										},
										{
											"begin": 873,
											"end": 893,
											"name": "MSTORE"
										},
										{
											"begin": 873,
											"end": 893,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 873,
											"end": 893,
											"name": "ADD"
										},
										{
											"begin": 873,
											"end": 893,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 873,
											"end": 893,
											"name": "KECCAK256"
										},
										{
											"begin": 873,
											"end": 893,
											"name": "SLOAD"
										},
										{
											"begin": 873,
											"end": 897,
											"name": "PUSH [tag]",
											"value": "20"
										},
										{
											"begin": 873,
											"end": 897,
											"name": "SWAP1"
										},
										{
											"begin": 873,
											"end": 905,
											"name": "SWAP2"
										},
										{
											"begin": 873,
											"end": 905,
											"name": "SWAP1"
										},
										{
											"begin": 873,
											"end": 905,
											"name": "PUSH",
											"value": "FFFFFFFF"
										},
										{
											"begin": 873,
											"end": 905,
											"name": "AND"
										},
										{
											"begin": 873,
											"end": 905,
											"name": "JUMP",
											"value": "[in]"
										},
										{
											"begin": 873,
											"end": 905,
											"name": "tag",
											"value": "19"
										},
										{
											"begin": 873,
											"end": 905,
											"name": "JUMPDEST"
										},
										{
											"begin": 850,
											"end": 858,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 850,
											"end": 870,
											"name": "DUP1"
										},
										{
											"begin": 859,
											"end": 869,
											"name": "CALLER"
										},
										{
											"begin": 850,
											"end": 870,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 850,
											"end": 870,
											"name": "AND"
										},
										{
											"begin": 850,
											"end": 870,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 850,
											"end": 870,
											"name": "AND"
										},
										{
											"begin": 850,
											"end": 870,
											"name": "DUP2"
										},
										{
											"begin": 850,
											"end": 870,
											"name": "MSTORE"
										},
										{
											"begin": 850,
											"end": 870,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 850,
											"end": 870,
											"name": "ADD"
										},
										{
											"begin": 850,
											"end": 870,
											"name": "SWAP1"
										},
										{
											"begin": 850,
											"end": 870,
											"name": "DUP2"
										},
										{
											"begin": 850,
											"end": 870,
											"name": "MSTORE"
										},
										{
											"begin": 850,
											"end": 870,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 850,
											"end": 870,
											"name": "ADD"
										},
										{
											"begin": 850,
											"end": 870,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 850,
											"end": 870,
											"name": "KECCAK256"
										},
										{
											"begin": 850,
											"end": 905,
											"name": "DUP2"
										},
										{
											"begin": 850,
											"end": 905,
											"name": "SWAP1"
										},
										{
											"begin": 850,
											"end": 905,
											"name": "SSTORE"
										},
										{
											"begin": 850,
											"end": 905,
											"name": "POP"
										},
										{
											"begin": 928,
											"end": 953,
											"name": "PUSH [tag]",
											"value": "21"
										},
										{
											"begin": 946,
											"end": 952,
											"name": "DUP3"
										},
										{
											"begin": 928,
											"end": 936,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 928,
											"end": 941,
											"name": "DUP1"
										},
										{
											"begin": 937,
											"end": 940,
											"name": "DUP7"
										},
										{
											"begin": 928,
											"end": 941,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 928,
											"end": 941,
											"name": "AND"
										},
										{
											"begin": 928,
											"end": 941,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 928,
											"end": 941,
											"name": "AND"
										},
										{
											"begin": 928,
											"end": 941,
											"name": "DUP2"
										},
										{
											"begin": 928,
											"end": 941,
											"name": "MSTORE"
										},
										{
											"begin": 928,
											"end": 941,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 928,
											"end": 941,
											"name": "ADD"
										},
										{
											"begin": 928,
											"end": 941,
											"name": "SWAP1"
										},
										{
											"begin": 928,
											"end": 941,
											"name": "DUP2"
										},
										{
											"begin": 928,
											"end": 941,
											"name": "MSTORE"
										},
										{
											"begin": 928,
											"end": 941,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 928,
											"end": 941,
											"name": "ADD"
										},
										{
											"begin": 928,
											"end": 941,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 928,
											"end": 941,
											"name": "KECCAK256"
										},
										{
											"begin": 928,
											"end": 941,
											"name": "SLOAD"
										},
										{
											"begin": 928,
											"end": 945,
											"name": "PUSH [tag]",
											"value": "22"
										},
										{
											"begin": 928,
											"end": 945,
											"name": "SWAP1"
										},
										{
											"begin": 928,
											"end": 953,
											"name": "SWAP2"
										},
										{
											"begin": 928,
											"end": 953,
											"name": "SWAP1"
										},
										{
											"begin": 928,
											"end": 953,
											"name": "PUSH",
											"value": "FFFFFFFF"
										},
										{
											"begin": 928,
											"end": 953,
											"name": "AND"
										},
										{
											"begin": 928,
											"end": 953,
											"name": "JUMP",
											"value": "[in]"
										},
										{
											"begin": 928,
											"end": 953,
											"name": "tag",
											"value": "21"
										},
										{
											"begin": 928,
											"end": 953,
											"name": "JUMPDEST"
										},
										{
											"begin": 912,
											"end": 920,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 912,
											"end": 925,
											"name": "DUP1"
										},
										{
											"begin": 921,
											"end": 924,
											"name": "DUP6"
										},
										{
											"begin": 912,
											"end": 925,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 912,
											"end": 925,
											"name": "AND"
										},
										{
											"begin": 912,
											"end": 925,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 912,
											"end": 925,
											"name": "AND"
										},
										{
											"begin": 912,
											"end": 925,
											"name": "DUP2"
										},
										{
											"begin": 912,
											"end": 925,
											"name": "MSTORE"
										},
										{
											"begin": 912,
											"end": 925,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 912,
											"end": 925,
											"name": "ADD"
										},
										{
											"begin": 912,
											"end": 925,
											"name": "SWAP1"
										},
										{
											"begin": 912,
											"end": 925,
											"name": "DUP2"
										},
										{
											"begin": 912,
											"end": 925,
											"name": "MSTORE"
										},
										{
											"begin": 912,
											"end": 925,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 912,
											"end": 925,
											"name": "ADD"
										},
										{
											"begin": 912,
											"end": 925,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 912,
											"end": 925,
											"name": "KECCAK256"
										},
										{
											"begin": 912,
											"end": 953,
											"name": "DUP2"
										},
										{
											"begin": 912,
											"end": 953,
											"name": "SWAP1"
										},
										{
											"begin": 912,
											"end": 953,
											"name": "SSTORE"
										},
										{
											"begin": 912,
											"end": 953,
											"name": "POP"
										},
										{
											"begin": 981,
											"end": 984,
											"name": "DUP3"
										},
										{
											"begin": 960,
											"end": 993,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 960,
											"end": 993,
											"name": "AND"
										},
										{
											"begin": 969,
											"end": 979,
											"name": "CALLER"
										},
										{
											"begin": 960,
											"end": 993,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 960,
											"end": 993,
											"name": "AND"
										},
										{
											"begin": 960,
											"end": 993,
											"name": "PUSH",
											"value": "DDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF"
										},
										{
											"begin": 986,
											"end": 992,
											"name": "DUP5"
										},
										{
											"begin": 960,
											"end": 993,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 960,
											"end": 993,
											"name": "MLOAD"
										},
										{
											"begin": 960,
											"end": 993,
											"name": "DUP1"
										},
										{
											"begin": 960,
											"end": 993,
											"name": "DUP3"
										},
										{
											"begin": 960,
											"end": 993,
											"name": "DUP2"
										},
										{
											"begin": 960,
											"end": 993,
											"name": "MSTORE"
										},
										{
											"begin": 960,
											"end": 993,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 960,
											"end": 993,
											"name": "ADD"
										},
										{
											"begin": 960,
											"end": 993,
											"name": "SWAP2"
										},
										{
											"begin": 960,
											"end": 993,
											"name": "POP"
										},
										{
											"begin": 960,
											"end": 993,
											"name": "POP"
										},
										{
											"begin": 960,
											"end": 993,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 960,
											"end": 993,
											"name": "MLOAD"
										},
										{
											"begin": 960,
											"end": 993,
											"name": "DUP1"
										},
										{
											"begin": 960,
											"end": 993,
											"name": "SWAP2"
										},
										{
											"begin": 960,
											"end": 993,
											"name": "SUB"
										},
										{
											"begin": 960,
											"end": 993,
											"name": "SWAP1"
										},
										{
											"begin": 960,
											"end": 993,
											"name": "LOG3"
										},
										{
											"begin": 1007,
											"end": 1011,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": 1000,
											"end": 1011,
											"name": "SWAP1"
										},
										{
											"begin": 1000,
											"end": 1011,
											"name": "POP"
										},
										{
											"begin": 629,
											"end": 1017,
											"name": "SWAP3"
										},
										{
											"begin": 629,
											"end": 1017,
											"name": "SWAP2"
										},
										{
											"begin": 629,
											"end": 1017,
											"name": "POP"
										},
										{
											"begin": 629,
											"end": 1017,
											"name": "POP"
										},
										{
											"begin": 629,
											"end": 1017,
											"name": "JUMP",
											"value": "[out]"
										},
										{
											"begin": 870,
											"end": 983,
											"name": "tag",
											"value": "20"
										},
										{
											"begin": 870,
											"end": 983,
											"name": "JUMPDEST"
										},
										{
											"begin": 928,
											"end": 935,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 956,
											"end": 957,
											"name": "DUP3"
										},
										{
											"begin": 951,
											"end": 952,
											"name": "DUP3"
										},
										{
											"begin": 951,
											"end": 957,
											"name": "GT"
										},
										{
											"begin": 951,
											"end": 957,
											"name": "ISZERO"
										},
										{
											"begin": 944,
											"end": 958,
											"name": "ISZERO"
										},
										{
											"begin": 944,
											"end": 958,
											"name": "ISZERO"
										},
										{
											"begin": 944,
											"end": 958,
											"name": "PUSH [tag]",
											"value": "24"
										},
										{
											"begin": 944,
											"end": 958,
											"name": "JUMPI"
										},
										{
											"begin": 944,
											"end": 958,
											"name": "INVALID"
										},
										{
											"begin": 944,
											"end": 958,
											"name": "tag",
											"value": "24"
										},
										{
											"begin": 944,
											"end": 958,
											"name": "JUMPDEST"
										},
										{
											"begin": 976,
											"end": 977,
											"name": "DUP2"
										},
										{
											"begin": 972,
											"end": 973,
											"name": "DUP4"
										},
										{
											"begin": 972,
											"end": 977,
											"name": "SUB"
										},
										{
											"begin": 965,
											"end": 977,
											"name": "SWAP1"
										},
										{
											"begin": 965,
											"end": 977,
											"name": "POP"
										},
										{
											"begin": 870,
											"end": 983,
											"name": "SWAP3"
										},
										{
											"begin": 870,
											"end": 983,
											"name": "SWAP2"
										},
										{
											"begin": 870,
											"end": 983,
											"name": "POP"
										},
										{
											"begin": 870,
											"end": 983,
											"name": "POP"
										},
										{
											"begin": 870,
											"end": 983,
											"name": "JUMP",
											"value": "[out]"
										},
										{
											"begin": 1050,
											"end": 1183,
											"name": "tag",
											"value": "22"
										},
										{
											"begin": 1050,
											"end": 1183,
											"name": "JUMPDEST"
										},
										{
											"begin": 1108,
											"end": 1115,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 1124,
											"end": 1133,
											"name": "DUP1"
										},
										{
											"begin": 1140,
											"end": 1141,
											"name": "DUP3"
										},
										{
											"begin": 1136,
											"end": 1137,
											"name": "DUP5"
										},
										{
											"begin": 1136,
											"end": 1141,
											"name": "ADD"
										},
										{
											"begin": 1124,
											"end": 1141,
											"name": "SWAP1"
										},
										{
											"begin": 1124,
											"end": 1141,
											"name": "POP"
										},
										{
											"begin": 1160,
											"end": 1161,
											"name": "DUP4"
										},
										{
											"begin": 1155,
											"end": 1156,
											"name": "DUP2"
										},
										{
											"begin": 1155,
											"end": 1161,
											"name": "LT"
										},
										{
											"begin": 1155,
											"end": 1161,
											"name": "ISZERO"
										},
										{
											"begin": 1148,
											"end": 1162,
											"name": "ISZERO"
										},
										{
											"begin": 1148,
											"end": 1162,
											"name": "ISZERO"
										},
										{
											"begin": 1148,
											"end": 1162,
											"name": "PUSH [tag]",
											"value": "26"
										},
										{
											"begin": 1148,
											"end": 1162,
											"name": "JUMPI"
										},
										{
											"begin": 1148,
											"end": 1162,
											"name": "INVALID"
										},
										{
											"begin": 1148,
											"end": 1162,
											"name": "tag",
											"value": "26"
										},
										{
											"begin": 1148,
											"end": 1162,
											"name": "JUMPDEST"
										},
										{
											"begin": 1176,
											"end": 1177,
											"name": "DUP1"
										},
										{
											"begin": 1169,
											"end": 1177,
											"name": "SWAP2"
										},
										{
											"begin": 1169,
											"end": 1177,
											"name": "POP"
										},
										{
											"begin": 1050,
											"end": 1183,
											"name": "POP"
										},
										{
											"begin": 1050,
											"end": 1183,
											"name": "SWAP3"
										},
										{
											"begin": 1050,
											"end": 1183,
											"name": "SWAP2"
										},
										{
											"begin": 1050,
											"end": 1183,
											"name": "POP"
										},
										{
											"begin": 1050,
											"end": 1183,
											"name": "POP"
										},
										{
											"begin": 1050,
											"end": 1183,
											"name": "JUMP",
											"value": "[out]"
										}
									]
								}
							}
						},
						"methodIdentifiers": {
							"balanceOf(address)": "70a08231",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.4.26+commit.4563c3fc\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}],\"devdoc\":{\"methods\":{\"balanceOf(address)\":{\"details\":\"Gets the balance of the specified address.\\r\",\"params\":{\"_owner\":\"The address to query the the balance of.\\r\"},\"return\":\"An uint256 representing the amount owned by the passed address.\\r\"},\"totalSupply()\":{\"details\":\"total number of tokens in existence\\r\"},\"transfer(address,uint256)\":{\"details\":\"transfer token for a specified address\\r\",\"params\":{\"_to\":\"The address to transfer to.\\r\",\"_value\":\"The amount to be transferred.\\r\"}}},\"title\":\"Basic token\\r\"},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"erc20/contracts/BasicToken.sol\":\"BasicToken\"},\"evmVersion\":\"byzantium\",\"libraries\":{},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"erc20/contracts/BasicToken.sol\":{\"keccak256\":\"0x4048384d4f92db32e4a767ff232bd80b585bcb6f8835ea5413de52438947c0f3\",\"urls\":[\"bzzr://38065e30a9b41828cc3004a736eed28da464784bd285a29f8f0bbbd877922d33\"]},\"erc20/contracts/ERC20Basic.sol\":{\"keccak256\":\"0x1f3c5cfe3678d25646cb1f1ce20b414e52a7dcde8abe46873b5740d32e08d655\",\"urls\":[\"bzzr://45add859ca62e4833cdac29e7a71f894dc82bbfeebc65acf4b67766667d54539\"]},\"erc20/contracts/SafeMath.sol\":{\"keccak256\":\"0x8fdf7e0a3939484bb124e5c37bdf801d7723c23dd0e189e3b0298593470902e4\",\"urls\":[\"bzzr://179b645f42dbb8d1208fd8cd17fcce20fa72fb4b02bbfaaa65cc7a5d0180559f\"]}},\"version\":1}",
					"userdoc": {
						"methods": {}
					}
				}
			},
			"erc20/contracts/ERC20Basic.sol": {
				"ERC20Basic": {
					"abi": [
						{
							"constant": true,
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"name": "",
									"type": "uint256"
								}
							],
							"payable": false,
							"stateMutability": "view",
							"type": "function"
						},
						{
							"constant": true,
							"inputs": [
								{
									"name": "who",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"name": "",
									"type": "uint256"
								}
							],
							"payable": false,
							"stateMutability": "view",
							"type": "function"
						},
						{
							"constant": false,
							"inputs": [
								{
									"name": "to",
									"type": "address"
								},
								{
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"name": "",
									"type": "bool"
								}
							],
							"payable": false,
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						}
					],
					"devdoc": {
						"methods": {},
						"title": "ERC20Basic\r"
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"balanceOf(address)": "70a08231",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb"
						}
					},
					"metadata": "",
					"userdoc": {
						"methods": {}
					}
				}
			},
			"erc20/contracts/SafeMath.sol": {
				"SafeMath": {
					"abi": [],
					"devdoc": {
						"methods": {},
						"title": "SafeMath\r"
					},
					"evm": {
						"assembly": "    /* \"erc20/contracts/SafeMath.sol\":124:1186  library SafeMath {\r... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n    /* \"--CODEGEN--\":132:134   */\n  0xb\n    /* \"--CODEGEN--\":166:173   */\n  dup3\n    /* \"--CODEGEN--\":155:164   */\n  dup3\n    /* \"--CODEGEN--\":146:153   */\n  dup3\n    /* \"--CODEGEN--\":137:174   */\n  codecopy\n    /* \"--CODEGEN--\":252:259   */\n  dup1\n    /* \"--CODEGEN--\":246:260   */\n  mload\n    /* \"--CODEGEN--\":243:244   */\n  0x0\n    /* \"--CODEGEN--\":238:261   */\n  byte\n    /* \"--CODEGEN--\":232:236   */\n  0x73\n    /* \"--CODEGEN--\":229:262   */\n  eq\n    /* \"--CODEGEN--\":270:271   */\n  0x0\n    /* \"--CODEGEN--\":265:285   */\n  dup2\n  eq\n  tag_2\n  jumpi\n    /* \"--CODEGEN--\":222:285   */\n  jump(tag_1)\n    /* \"--CODEGEN--\":265:285   */\ntag_2:\n    /* \"--CODEGEN--\":274:283   */\n  invalid\n    /* \"--CODEGEN--\":222:285   */\ntag_1:\n  pop\n    /* \"--CODEGEN--\":298:307   */\n  address\n    /* \"--CODEGEN--\":295:296   */\n  0x0\n    /* \"--CODEGEN--\":288:308   */\n  mstore\n    /* \"--CODEGEN--\":328:332   */\n  0x73\n    /* \"--CODEGEN--\":319:326   */\n  dup2\n    /* \"--CODEGEN--\":311:333   */\n  mstore8\n    /* \"--CODEGEN--\":352:359   */\n  dup3\n    /* \"--CODEGEN--\":343:350   */\n  dup2\n    /* \"--CODEGEN--\":336:360   */\n  return\nstop\n\nsub_0: assembly {\n        /* \"erc20/contracts/SafeMath.sol\":124:1186  library SafeMath {\r... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x0\n      dup1\n      revert\n\n    auxdata: 0xa165627a7a7230582079afab9dd58aa01e7046d54f09e6b7e4a311c8d1875097e550d2aa69a2a2f0a30029\n}\n",
						"bytecode": {
							"linkReferences": {},
							"object": "604c602c600b82828239805160001a60731460008114601c57601e565bfe5b5030600052607381538281f30073000000000000000000000000000000000000000030146080604052600080fd00a165627a7a7230582079afab9dd58aa01e7046d54f09e6b7e4a311c8d1875097e550d2aa69a2a2f0a30029",
							"opcodes": "PUSH1 0x4C PUSH1 0x2C PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x0 DUP2 EQ PUSH1 0x1C JUMPI PUSH1 0x1E JUMP JUMPDEST INVALID JUMPDEST POP ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN STOP PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT STOP LOG1 PUSH6 0x627A7A723058 KECCAK256 PUSH26 0xAFAB9DD58AA01E7046D54F09E6B7E4A311C8D1875097E550D2AA PUSH10 0xA2A2F0A3002900000000 ",
							"sourceMap": "124:1062:2:-;;132:2:-1;166:7;155:9;146:7;137:37;252:7;246:14;243:1;238:23;232:4;229:33;270:1;265:20;;;;222:63;;265:20;274:9;222:63;;298:9;295:1;288:20;328:4;319:7;311:22;352:7;343;336:24"
						},
						"deployedBytecode": {
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fd00a165627a7a7230582079afab9dd58aa01e7046d54f09e6b7e4a311c8d1875097e550d2aa69a2a2f0a30029",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT STOP LOG1 PUSH6 0x627A7A723058 KECCAK256 PUSH26 0xAFAB9DD58AA01E7046D54F09E6B7E4A311C8D1875097E550D2AA PUSH10 0xA2A2F0A3002900000000 ",
							"sourceMap": "124:1062:2:-;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "15200",
								"executionCost": "116",
								"totalCost": "15316"
							},
							"internal": {
								"add(uint256,uint256)": "infinite",
								"div(uint256,uint256)": "infinite",
								"mul(uint256,uint256)": "infinite",
								"sub(uint256,uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 124,
									"end": 1186,
									"name": "PUSH #[$]",
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 124,
									"end": 1186,
									"name": "PUSH [$]",
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 132,
									"end": 134,
									"name": "PUSH",
									"value": "B"
								},
								{
									"begin": 166,
									"end": 173,
									"name": "DUP3"
								},
								{
									"begin": 155,
									"end": 164,
									"name": "DUP3"
								},
								{
									"begin": 146,
									"end": 153,
									"name": "DUP3"
								},
								{
									"begin": 137,
									"end": 174,
									"name": "CODECOPY"
								},
								{
									"begin": 252,
									"end": 259,
									"name": "DUP1"
								},
								{
									"begin": 246,
									"end": 260,
									"name": "MLOAD"
								},
								{
									"begin": 243,
									"end": 244,
									"name": "PUSH",
									"value": "0"
								},
								{
									"begin": 238,
									"end": 261,
									"name": "BYTE"
								},
								{
									"begin": 232,
									"end": 236,
									"name": "PUSH",
									"value": "73"
								},
								{
									"begin": 229,
									"end": 262,
									"name": "EQ"
								},
								{
									"begin": 270,
									"end": 271,
									"name": "PUSH",
									"value": "0"
								},
								{
									"begin": 265,
									"end": 285,
									"name": "DUP2"
								},
								{
									"begin": 265,
									"end": 285,
									"name": "EQ"
								},
								{
									"begin": 265,
									"end": 285,
									"name": "PUSH [tag]",
									"value": "2"
								},
								{
									"begin": 265,
									"end": 285,
									"name": "JUMPI"
								},
								{
									"begin": 222,
									"end": 285,
									"name": "PUSH [tag]",
									"value": "1"
								},
								{
									"begin": 222,
									"end": 285,
									"name": "JUMP"
								},
								{
									"begin": 265,
									"end": 285,
									"name": "tag",
									"value": "2"
								},
								{
									"begin": 265,
									"end": 285,
									"name": "JUMPDEST"
								},
								{
									"begin": 274,
									"end": 283,
									"name": "INVALID"
								},
								{
									"begin": 222,
									"end": 285,
									"name": "tag",
									"value": "1"
								},
								{
									"begin": 222,
									"end": 285,
									"name": "JUMPDEST"
								},
								{
									"begin": 222,
									"end": 285,
									"name": "POP"
								},
								{
									"begin": 298,
									"end": 307,
									"name": "ADDRESS"
								},
								{
									"begin": 295,
									"end": 296,
									"name": "PUSH",
									"value": "0"
								},
								{
									"begin": 288,
									"end": 308,
									"name": "MSTORE"
								},
								{
									"begin": 328,
									"end": 332,
									"name": "PUSH",
									"value": "73"
								},
								{
									"begin": 319,
									"end": 326,
									"name": "DUP2"
								},
								{
									"begin": 311,
									"end": 333,
									"name": "MSTORE8"
								},
								{
									"begin": 352,
									"end": 359,
									"name": "DUP3"
								},
								{
									"begin": 343,
									"end": 350,
									"name": "DUP2"
								},
								{
									"begin": 336,
									"end": 360,
									"name": "RETURN"
								}
							],
							".data": {
								"0": {
									".auxdata": "a165627a7a7230582079afab9dd58aa01e7046d54f09e6b7e4a311c8d1875097e550d2aa69a2a2f0a30029",
									".code": [
										{
											"begin": 124,
											"end": 1186,
											"name": "PUSHDEPLOYADDRESS"
										},
										{
											"begin": 124,
											"end": 1186,
											"name": "ADDRESS"
										},
										{
											"begin": 124,
											"end": 1186,
											"name": "EQ"
										},
										{
											"begin": 124,
											"end": 1186,
											"name": "PUSH",
											"value": "80"
										},
										{
											"begin": 124,
											"end": 1186,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 124,
											"end": 1186,
											"name": "MSTORE"
										},
										{
											"begin": 124,
											"end": 1186,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 124,
											"end": 1186,
											"name": "DUP1"
										},
										{
											"begin": 124,
											"end": 1186,
											"name": "REVERT"
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.4.26+commit.4563c3fc\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"methods\":{},\"title\":\"SafeMath\\r\"},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"erc20/contracts/SafeMath.sol\":\"SafeMath\"},\"evmVersion\":\"byzantium\",\"libraries\":{},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"erc20/contracts/SafeMath.sol\":{\"keccak256\":\"0x8fdf7e0a3939484bb124e5c37bdf801d7723c23dd0e189e3b0298593470902e4\",\"urls\":[\"bzzr://179b645f42dbb8d1208fd8cd17fcce20fa72fb4b02bbfaaa65cc7a5d0180559f\"]}},\"version\":1}",
					"userdoc": {
						"methods": {}
					}
				}
			}
		},
		"errors": [
			{
				"component": "general",
				"formattedMessage": "erc20/contracts/BasicToken.sol:38:5: Warning: Invoking events without \"emit\" prefix is deprecated.\n    Transfer(msg.sender, _to, _value);\r\n    ^-------------------------------^\n",
				"message": "Invoking events without \"emit\" prefix is deprecated.",
				"severity": "warning",
				"sourceLocation": {
					"end": 993,
					"file": "erc20/contracts/BasicToken.sol",
					"start": 960
				},
				"type": "Warning"
			}
		],
		"sources": {
			"erc20/contracts/BasicToken.sol": {
				"ast": {
					"absolutePath": "erc20/contracts/BasicToken.sol",
					"exportedSymbols": {
						"BasicToken": [
							95
						]
					},
					"id": 96,
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"^",
								"0.4",
								".18"
							],
							"nodeType": "PragmaDirective",
							"src": "0:24:0"
						},
						{
							"absolutePath": "erc20/contracts/ERC20Basic.sol",
							"file": "./ERC20Basic.sol",
							"id": 2,
							"nodeType": "ImportDirective",
							"scope": 96,
							"sourceUnit": 128,
							"src": "30:26:0",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "erc20/contracts/SafeMath.sol",
							"file": "./SafeMath.sol",
							"id": 3,
							"nodeType": "ImportDirective",
							"scope": 96,
							"sourceUnit": 226,
							"src": "58:24:0",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"baseContracts": [
								{
									"arguments": null,
									"baseName": {
										"contractScope": null,
										"id": 4,
										"name": "ERC20Basic",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 127,
										"src": "205:10:0",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_ERC20Basic_$127",
											"typeString": "contract ERC20Basic"
										}
									},
									"id": 5,
									"nodeType": "InheritanceSpecifier",
									"src": "205:10:0"
								}
							],
							"contractDependencies": [
								127
							],
							"contractKind": "contract",
							"documentation": "@title Basic token\r\n@dev Basic version of StandardToken, with no allowances.\r",
							"fullyImplemented": true,
							"id": 95,
							"linearizedBaseContracts": [
								95,
								127
							],
							"name": "BasicToken",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"id": 8,
									"libraryName": {
										"contractScope": null,
										"id": 6,
										"name": "SafeMath",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 225,
										"src": "227:8:0",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_SafeMath_$225",
											"typeString": "library SafeMath"
										}
									},
									"nodeType": "UsingForDirective",
									"src": "221:27:0",
									"typeName": {
										"id": 7,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "240:7:0",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									}
								},
								{
									"constant": false,
									"id": 12,
									"name": "balances",
									"nodeType": "VariableDeclaration",
									"scope": 95,
									"src": "254:36:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
										"typeString": "mapping(address => uint256)"
									},
									"typeName": {
										"id": 11,
										"keyType": {
											"id": 9,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "262:7:0",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "254:27:0",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
											"typeString": "mapping(address => uint256)"
										},
										"valueType": {
											"id": 10,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "273:7:0",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										}
									},
									"value": null,
									"visibility": "internal"
								},
								{
									"constant": false,
									"id": 14,
									"name": "totalSupply_",
									"nodeType": "VariableDeclaration",
									"scope": 95,
									"src": "297:20:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 13,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "297:7:0",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": null,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 21,
										"nodeType": "Block",
										"src": "436:32:0",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"id": 19,
													"name": "totalSupply_",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 14,
													"src": "450:12:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 18,
												"id": 20,
												"nodeType": "Return",
												"src": "443:19:0"
											}
										]
									},
									"documentation": "@dev total number of tokens in existence\r",
									"id": 22,
									"implemented": true,
									"isConstructor": false,
									"isDeclaredConst": true,
									"modifiers": [],
									"name": "totalSupply",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 15,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "403:2:0"
									},
									"payable": false,
									"returnParameters": {
										"id": 18,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 17,
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 22,
												"src": "427:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 16,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "427:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "426:9:0"
									},
									"scope": 95,
									"src": "383:85:0",
									"stateMutability": "view",
									"superFunction": 102,
									"visibility": "public"
								},
								{
									"body": {
										"id": 81,
										"nodeType": "Block",
										"src": "698:319:0",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 36,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"id": 32,
																"name": "_to",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 24,
																"src": "713:3:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"argumentTypes": null,
																"arguments": [
																	{
																		"argumentTypes": null,
																		"hexValue": "30",
																		"id": 34,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "728:1:0",
																		"subdenomination": null,
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 33,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "720:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": "address"
																},
																"id": 35,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "720:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "713:17:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 31,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															243,
															244
														],
														"referencedDeclaration": 243,
														"src": "705:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 37,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "705:26:0",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 38,
												"nodeType": "ExpressionStatement",
												"src": "705:26:0"
											},
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 45,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"id": 40,
																"name": "_value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 26,
																"src": "746:6:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<=",
															"rightExpression": {
																"argumentTypes": null,
																"baseExpression": {
																	"argumentTypes": null,
																	"id": 41,
																	"name": "balances",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 12,
																	"src": "756:8:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																		"typeString": "mapping(address => uint256)"
																	}
																},
																"id": 44,
																"indexExpression": {
																	"argumentTypes": null,
																	"expression": {
																		"argumentTypes": null,
																		"id": 42,
																		"name": "msg",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 240,
																		"src": "765:3:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_message",
																			"typeString": "msg"
																		}
																	},
																	"id": 43,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "sender",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": null,
																	"src": "765:10:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "756:20:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "746:30:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 39,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															243,
															244
														],
														"referencedDeclaration": 243,
														"src": "738:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 46,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "738:39:0",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 47,
												"nodeType": "ExpressionStatement",
												"src": "738:39:0"
											},
											{
												"expression": {
													"argumentTypes": null,
													"id": 59,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"argumentTypes": null,
														"baseExpression": {
															"argumentTypes": null,
															"id": 48,
															"name": "balances",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 12,
															"src": "850:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																"typeString": "mapping(address => uint256)"
															}
														},
														"id": 51,
														"indexExpression": {
															"argumentTypes": null,
															"expression": {
																"argumentTypes": null,
																"id": 49,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 240,
																"src": "859:3:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 50,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"referencedDeclaration": null,
															"src": "859:10:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "850:20:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"argumentTypes": null,
														"arguments": [
															{
																"argumentTypes": null,
																"id": 57,
																"name": "_value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 26,
																"src": "898:6:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															],
															"expression": {
																"argumentTypes": null,
																"baseExpression": {
																	"argumentTypes": null,
																	"id": 52,
																	"name": "balances",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 12,
																	"src": "873:8:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																		"typeString": "mapping(address => uint256)"
																	}
																},
																"id": 55,
																"indexExpression": {
																	"argumentTypes": null,
																	"expression": {
																		"argumentTypes": null,
																		"id": 53,
																		"name": "msg",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 240,
																		"src": "882:3:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_message",
																			"typeString": "msg"
																		}
																	},
																	"id": 54,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "sender",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": null,
																	"src": "882:10:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "873:20:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 56,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sub",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 200,
															"src": "873:24:0",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
																"typeString": "function (uint256,uint256) pure returns (uint256)"
															}
														},
														"id": 58,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "873:32:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "850:55:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 60,
												"nodeType": "ExpressionStatement",
												"src": "850:55:0"
											},
											{
												"expression": {
													"argumentTypes": null,
													"id": 70,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"argumentTypes": null,
														"baseExpression": {
															"argumentTypes": null,
															"id": 61,
															"name": "balances",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 12,
															"src": "912:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																"typeString": "mapping(address => uint256)"
															}
														},
														"id": 63,
														"indexExpression": {
															"argumentTypes": null,
															"id": 62,
															"name": "_to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 24,
															"src": "921:3:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "912:13:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"argumentTypes": null,
														"arguments": [
															{
																"argumentTypes": null,
																"id": 68,
																"name": "_value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 26,
																"src": "946:6:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															],
															"expression": {
																"argumentTypes": null,
																"baseExpression": {
																	"argumentTypes": null,
																	"id": 64,
																	"name": "balances",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 12,
																	"src": "928:8:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																		"typeString": "mapping(address => uint256)"
																	}
																},
																"id": 66,
																"indexExpression": {
																	"argumentTypes": null,
																	"id": 65,
																	"name": "_to",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 24,
																	"src": "937:3:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "928:13:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 67,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "add",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 224,
															"src": "928:17:0",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
																"typeString": "function (uint256,uint256) pure returns (uint256)"
															}
														},
														"id": 69,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "928:25:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "912:41:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 71,
												"nodeType": "ExpressionStatement",
												"src": "912:41:0"
											},
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"expression": {
																"argumentTypes": null,
																"id": 73,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 240,
																"src": "969:3:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 74,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"referencedDeclaration": null,
															"src": "969:10:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"argumentTypes": null,
															"id": 75,
															"name": "_to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 24,
															"src": "981:3:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"argumentTypes": null,
															"id": 76,
															"name": "_value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 26,
															"src": "986:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 72,
														"name": "Transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 126,
														"src": "960:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 77,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "960:33:0",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 78,
												"nodeType": "ExpressionStatement",
												"src": "960:33:0"
											},
											{
												"expression": {
													"argumentTypes": null,
													"hexValue": "74727565",
													"id": 79,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "1007:4:0",
													"subdenomination": null,
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 30,
												"id": 80,
												"nodeType": "Return",
												"src": "1000:11:0"
											}
										]
									},
									"documentation": "@dev transfer token for a specified address\r\n@param _to The address to transfer to.\r\n@param _value The amount to be transferred.\r",
									"id": 82,
									"implemented": true,
									"isConstructor": false,
									"isDeclaredConst": false,
									"modifiers": [],
									"name": "transfer",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 27,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 24,
												"name": "_to",
												"nodeType": "VariableDeclaration",
												"scope": 82,
												"src": "647:11:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 23,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "647:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 26,
												"name": "_value",
												"nodeType": "VariableDeclaration",
												"scope": 82,
												"src": "660:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 25,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "660:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "646:29:0"
									},
									"payable": false,
									"returnParameters": {
										"id": 30,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 29,
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 82,
												"src": "692:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 28,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "692:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "691:6:0"
									},
									"scope": 95,
									"src": "629:388:0",
									"stateMutability": "nonpayable",
									"superFunction": 118,
									"visibility": "public"
								},
								{
									"body": {
										"id": 93,
										"nodeType": "Block",
										"src": "1299:36:0",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"baseExpression": {
														"argumentTypes": null,
														"id": 89,
														"name": "balances",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 12,
														"src": "1313:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
															"typeString": "mapping(address => uint256)"
														}
													},
													"id": 91,
													"indexExpression": {
														"argumentTypes": null,
														"id": 90,
														"name": "_owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 84,
														"src": "1322:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "1313:16:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 88,
												"id": 92,
												"nodeType": "Return",
												"src": "1306:23:0"
											}
										]
									},
									"documentation": "@dev Gets the balance of the specified address.\r\n@param _owner The address to query the the balance of.\r\n@return An uint256 representing the amount owned by the passed address.\r",
									"id": 94,
									"implemented": true,
									"isConstructor": false,
									"isDeclaredConst": true,
									"modifiers": [],
									"name": "balanceOf",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 85,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 84,
												"name": "_owner",
												"nodeType": "VariableDeclaration",
												"scope": 94,
												"src": "1245:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 83,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1245:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "1244:16:0"
									},
									"payable": false,
									"returnParameters": {
										"id": 88,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 87,
												"name": "balance",
												"nodeType": "VariableDeclaration",
												"scope": 94,
												"src": "1282:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 86,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1282:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "1281:17:0"
									},
									"scope": 95,
									"src": "1226:109:0",
									"stateMutability": "view",
									"superFunction": 109,
									"visibility": "public"
								}
							],
							"scope": 96,
							"src": "182:1158:0"
						}
					],
					"src": "0:1344:0"
				},
				"id": 0
			},
			"erc20/contracts/ERC20Basic.sol": {
				"ast": {
					"absolutePath": "erc20/contracts/ERC20Basic.sol",
					"exportedSymbols": {
						"ERC20Basic": [
							127
						]
					},
					"id": 128,
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 97,
							"literals": [
								"solidity",
								"^",
								"0.4",
								".18"
							],
							"nodeType": "PragmaDirective",
							"src": "0:24:1"
						},
						{
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": "@title ERC20Basic\r\n@dev Simpler version of ERC20 interface\r\n@dev see https://github.com/ethereum/EIPs/issues/179\r",
							"fullyImplemented": false,
							"id": 127,
							"linearizedBaseContracts": [
								127
							],
							"name": "ERC20Basic",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": null,
									"documentation": null,
									"id": 102,
									"implemented": false,
									"isConstructor": false,
									"isDeclaredConst": true,
									"modifiers": [],
									"name": "totalSupply",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 98,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "208:2:1"
									},
									"payable": false,
									"returnParameters": {
										"id": 101,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 100,
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 102,
												"src": "232:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 99,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "232:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "231:9:1"
									},
									"scope": 127,
									"src": "188:53:1",
									"stateMutability": "view",
									"superFunction": null,
									"visibility": "public"
								},
								{
									"body": null,
									"documentation": null,
									"id": 109,
									"implemented": false,
									"isConstructor": false,
									"isDeclaredConst": true,
									"modifiers": [],
									"name": "balanceOf",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 105,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 104,
												"name": "who",
												"nodeType": "VariableDeclaration",
												"scope": 109,
												"src": "264:11:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 103,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "264:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "263:13:1"
									},
									"payable": false,
									"returnParameters": {
										"id": 108,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 107,
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 109,
												"src": "298:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 106,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "298:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "297:9:1"
									},
									"scope": 127,
									"src": "245:62:1",
									"stateMutability": "view",
									"superFunction": null,
									"visibility": "public"
								},
								{
									"body": null,
									"documentation": null,
									"id": 118,
									"implemented": false,
									"isConstructor": false,
									"isDeclaredConst": false,
									"modifiers": [],
									"name": "transfer",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 114,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 111,
												"name": "to",
												"nodeType": "VariableDeclaration",
												"scope": 118,
												"src": "329:10:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 110,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "329:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 113,
												"name": "value",
												"nodeType": "VariableDeclaration",
												"scope": 118,
												"src": "341:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 112,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "341:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "328:27:1"
									},
									"payable": false,
									"returnParameters": {
										"id": 117,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 116,
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 118,
												"src": "372:4:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 115,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "372:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "371:6:1"
									},
									"scope": 127,
									"src": "311:67:1",
									"stateMutability": "nonpayable",
									"superFunction": null,
									"visibility": "public"
								},
								{
									"anonymous": false,
									"documentation": null,
									"id": 126,
									"name": "Transfer",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 125,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 120,
												"indexed": true,
												"name": "from",
												"nodeType": "VariableDeclaration",
												"scope": 126,
												"src": "397:20:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 119,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "397:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 122,
												"indexed": true,
												"name": "to",
												"nodeType": "VariableDeclaration",
												"scope": 126,
												"src": "419:18:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 121,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "419:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 124,
												"indexed": false,
												"name": "value",
												"nodeType": "VariableDeclaration",
												"scope": 126,
												"src": "439:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 123,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "439:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "396:57:1"
									},
									"src": "382:72:1"
								}
							],
							"scope": 128,
							"src": "163:294:1"
						}
					],
					"src": "0:461:1"
				},
				"id": 1
			},
			"erc20/contracts/SafeMath.sol": {
				"ast": {
					"absolutePath": "erc20/contracts/SafeMath.sol",
					"exportedSymbols": {
						"SafeMath": [
							225
						]
					},
					"id": 226,
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 129,
							"literals": [
								"solidity",
								"^",
								"0.4",
								".18"
							],
							"nodeType": "PragmaDirective",
							"src": "0:24:2"
						},
						{
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": "@title SafeMath\r\n@dev Math operations with safety checks that throw on error\r",
							"fullyImplemented": true,
							"id": 225,
							"linearizedBaseContracts": [
								225
							],
							"name": "SafeMath",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 161,
										"nodeType": "Block",
										"src": "282:113:2",
										"statements": [
											{
												"condition": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 140,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"id": 138,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 131,
														"src": "293:1:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"argumentTypes": null,
														"hexValue": "30",
														"id": 139,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "298:1:2",
														"subdenomination": null,
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "293:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": null,
												"id": 144,
												"nodeType": "IfStatement",
												"src": "289:37:2",
												"trueBody": {
													"id": 143,
													"nodeType": "Block",
													"src": "301:25:2",
													"statements": [
														{
															"expression": {
																"argumentTypes": null,
																"hexValue": "30",
																"id": 141,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "317:1:2",
																"subdenomination": null,
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"functionReturnParameters": 137,
															"id": 142,
															"nodeType": "Return",
															"src": "310:8:2"
														}
													]
												}
											},
											{
												"assignments": [
													146
												],
												"declarations": [
													{
														"constant": false,
														"id": 146,
														"name": "c",
														"nodeType": "VariableDeclaration",
														"scope": 162,
														"src": "332:9:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 145,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "332:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"value": null,
														"visibility": "internal"
													}
												],
												"id": 150,
												"initialValue": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 149,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"id": 147,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 131,
														"src": "344:1:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "*",
													"rightExpression": {
														"argumentTypes": null,
														"id": 148,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 133,
														"src": "348:1:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "344:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "332:17:2"
											},
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 156,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 154,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"argumentTypes": null,
																	"id": 152,
																	"name": "c",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 146,
																	"src": "363:1:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "/",
																"rightExpression": {
																	"argumentTypes": null,
																	"id": 153,
																	"name": "a",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 131,
																	"src": "367:1:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "363:5:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"argumentTypes": null,
																"id": 155,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 133,
																"src": "372:1:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "363:10:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 151,
														"name": "assert",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 229,
														"src": "356:6:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_assert_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 157,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "356:18:2",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 158,
												"nodeType": "ExpressionStatement",
												"src": "356:18:2"
											},
											{
												"expression": {
													"argumentTypes": null,
													"id": 159,
													"name": "c",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 146,
													"src": "388:1:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 137,
												"id": 160,
												"nodeType": "Return",
												"src": "381:8:2"
											}
										]
									},
									"documentation": "@dev Multiplies two numbers, throws on overflow.\r",
									"id": 162,
									"implemented": true,
									"isConstructor": false,
									"isDeclaredConst": true,
									"modifiers": [],
									"name": "mul",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 134,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 131,
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 162,
												"src": "228:9:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 130,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "228:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 133,
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 162,
												"src": "239:9:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 132,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "239:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "227:22:2"
									},
									"payable": false,
									"returnParameters": {
										"id": 137,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 136,
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 162,
												"src": "273:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 135,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "273:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "272:9:2"
									},
									"scope": 225,
									"src": "215:180:2",
									"stateMutability": "pure",
									"superFunction": null,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 179,
										"nodeType": "Block",
										"src": "549:203:2",
										"statements": [
											{
												"assignments": [
													172
												],
												"declarations": [
													{
														"constant": false,
														"id": 172,
														"name": "c",
														"nodeType": "VariableDeclaration",
														"scope": 180,
														"src": "631:9:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 171,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "631:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"value": null,
														"visibility": "internal"
													}
												],
												"id": 176,
												"initialValue": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 175,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"id": 173,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 164,
														"src": "643:1:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "/",
													"rightExpression": {
														"argumentTypes": null,
														"id": 174,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 166,
														"src": "647:1:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "643:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "631:17:2"
											},
											{
												"expression": {
													"argumentTypes": null,
													"id": 177,
													"name": "c",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 172,
													"src": "745:1:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 170,
												"id": 178,
												"nodeType": "Return",
												"src": "738:8:2"
											}
										]
									},
									"documentation": "@dev Integer division of two numbers, truncating the quotient.\r",
									"id": 180,
									"implemented": true,
									"isConstructor": false,
									"isDeclaredConst": true,
									"modifiers": [],
									"name": "div",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 167,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 164,
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 180,
												"src": "495:9:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 163,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "495:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 166,
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 180,
												"src": "506:9:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 165,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "506:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "494:22:2"
									},
									"payable": false,
									"returnParameters": {
										"id": 170,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 169,
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 180,
												"src": "540:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 168,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "540:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "539:9:2"
									},
									"scope": 225,
									"src": "482:270:2",
									"stateMutability": "pure",
									"superFunction": null,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 199,
										"nodeType": "Block",
										"src": "937:46:2",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 192,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"id": 190,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 184,
																"src": "951:1:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<=",
															"rightExpression": {
																"argumentTypes": null,
																"id": 191,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 182,
																"src": "956:1:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "951:6:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 189,
														"name": "assert",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 229,
														"src": "944:6:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_assert_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 193,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "944:14:2",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 194,
												"nodeType": "ExpressionStatement",
												"src": "944:14:2"
											},
											{
												"expression": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 197,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"id": 195,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 182,
														"src": "972:1:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "-",
													"rightExpression": {
														"argumentTypes": null,
														"id": 196,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 184,
														"src": "976:1:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "972:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 188,
												"id": 198,
												"nodeType": "Return",
												"src": "965:12:2"
											}
										]
									},
									"documentation": "@dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r",
									"id": 200,
									"implemented": true,
									"isConstructor": false,
									"isDeclaredConst": true,
									"modifiers": [],
									"name": "sub",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 185,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 182,
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 200,
												"src": "883:9:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 181,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "883:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 184,
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 200,
												"src": "894:9:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 183,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "894:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "882:22:2"
									},
									"payable": false,
									"returnParameters": {
										"id": 188,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 187,
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 200,
												"src": "928:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 186,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "928:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "927:9:2"
									},
									"scope": 225,
									"src": "870:113:2",
									"stateMutability": "pure",
									"superFunction": null,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 223,
										"nodeType": "Block",
										"src": "1117:66:2",
										"statements": [
											{
												"assignments": [
													210
												],
												"declarations": [
													{
														"constant": false,
														"id": 210,
														"name": "c",
														"nodeType": "VariableDeclaration",
														"scope": 224,
														"src": "1124:9:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 209,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "1124:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"value": null,
														"visibility": "internal"
													}
												],
												"id": 214,
												"initialValue": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 213,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"id": 211,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 202,
														"src": "1136:1:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "+",
													"rightExpression": {
														"argumentTypes": null,
														"id": 212,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 204,
														"src": "1140:1:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "1136:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1124:17:2"
											},
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 218,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"id": 216,
																"name": "c",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 210,
																"src": "1155:1:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"argumentTypes": null,
																"id": 217,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 202,
																"src": "1160:1:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1155:6:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 215,
														"name": "assert",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 229,
														"src": "1148:6:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_assert_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 219,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1148:14:2",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 220,
												"nodeType": "ExpressionStatement",
												"src": "1148:14:2"
											},
											{
												"expression": {
													"argumentTypes": null,
													"id": 221,
													"name": "c",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 210,
													"src": "1176:1:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 208,
												"id": 222,
												"nodeType": "Return",
												"src": "1169:8:2"
											}
										]
									},
									"documentation": "@dev Adds two numbers, throws on overflow.\r",
									"id": 224,
									"implemented": true,
									"isConstructor": false,
									"isDeclaredConst": true,
									"modifiers": [],
									"name": "add",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 205,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 202,
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 224,
												"src": "1063:9:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 201,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1063:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 204,
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 224,
												"src": "1074:9:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 203,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1074:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "1062:22:2"
									},
									"payable": false,
									"returnParameters": {
										"id": 208,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 207,
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 224,
												"src": "1108:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 206,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1108:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "1107:9:2"
									},
									"scope": 225,
									"src": "1050:133:2",
									"stateMutability": "pure",
									"superFunction": null,
									"visibility": "internal"
								}
							],
							"scope": 226,
							"src": "124:1062:2"
						}
					],
					"src": "0:1190:2"
				},
				"id": 2
			}
		}
	}
}